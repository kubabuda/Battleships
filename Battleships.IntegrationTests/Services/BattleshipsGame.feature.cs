// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Battleships.IntegrationTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("BattleshipsGame")]
    public partial class BattleshipsGameFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "BattleshipsGame.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BattleshipsGame", "\tIn order to play Battleships game\r\n\tAs a user in command line\r\n\tI want to have g" +
                    "rid displayed every round until all ships are hit", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("New game without ships on grid")]
        public virtual void NewGameWithoutShipsOnGrid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("New game without ships on grid", null, ((string[])(null)));
#line 7
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
 testRunner.Given("New Battleships game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.And("No ships on grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.When("Game play starts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
 testRunner.Then("Game is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 12
 testRunner.And("Empty grid was displayed 1 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Playing single round and missing")]
        public virtual void PlayingSingleRoundAndMissing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Playing single round and missing", null, ((string[])(null)));
#line 15
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 16
 testRunner.Given("New Battleships game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "line",
                        "column"});
            table1.AddRow(new string[] {
                        "1",
                        "1"});
#line 17
 testRunner.And("Ships in folowing grid points", ((string)(null)), table1, "And ");
#line 20
 testRunner.And("I play round with \'A4\' guess", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
 testRunner.Then("Grid was displayed 1 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 22
 testRunner.And("Miss mark was displayed 1 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
 testRunner.And("Console was displaying", @"  1 2 3 4 5 6 7 8 9 10
A       x             |
B                     |
C                     |
D                     |
E                     |
F                     |
G                     |
H                     |
I                     |
J                     |
  - - - - - - - - - - ", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
 testRunner.And("Game is not finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Playing single round and hiting")]
        public virtual void PlayingSingleRoundAndHiting()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Playing single round and hiting", null, ((string[])(null)));
#line 41
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 42
 testRunner.Given("New Battleships game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "line",
                        "column"});
            table2.AddRow(new string[] {
                        "1",
                        "4"});
#line 43
 testRunner.And("Ships in folowing grid points", ((string)(null)), table2, "And ");
#line 46
 testRunner.And("I play round with \'A4\' guess", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
 testRunner.Then("Grid was displayed 1 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 48
 testRunner.And("Hit mark was displayed 1 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 49
 testRunner.And("Console was displaying", @"  1 2 3 4 5 6 7 8 9 10
A       *             |
B                     |
C                     |
D                     |
E                     |
F                     |
G                     |
H                     |
I                     |
J                     |
  - - - - - - - - - - ", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 64
 testRunner.And("Game is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Playing entire game with ships on grid")]
        public virtual void PlayingEntireGameWithShipsOnGrid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Playing entire game with ships on grid", null, ((string[])(null)));
#line 66
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 67
 testRunner.Given("New Battleships game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "line",
                        "column"});
            table3.AddRow(new string[] {
                        "1",
                        "1"});
            table3.AddRow(new string[] {
                        "1",
                        "2"});
            table3.AddRow(new string[] {
                        "1",
                        "3"});
            table3.AddRow(new string[] {
                        "3",
                        "4"});
            table3.AddRow(new string[] {
                        "4",
                        "4"});
#line 68
 testRunner.And("Ships in folowing grid points", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "value"});
            table4.AddRow(new string[] {
                        "A1"});
            table4.AddRow(new string[] {
                        "A2"});
            table4.AddRow(new string[] {
                        "A3"});
            table4.AddRow(new string[] {
                        "C4"});
            table4.AddRow(new string[] {
                        "D4"});
#line 75
 testRunner.And("I type grid coordinates", ((string)(null)), table4, "And ");
#line 82
 testRunner.When("Game play starts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 83
 testRunner.Then("Game is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 84
 testRunner.And("Grid was displayed 6 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Shooting at same spot twice")]
        public virtual void ShootingAtSameSpotTwice()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Shooting at same spot twice", null, ((string[])(null)));
#line 87
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 88
 testRunner.Given("New Battleships game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "line",
                        "column"});
            table5.AddRow(new string[] {
                        "1",
                        "1"});
            table5.AddRow(new string[] {
                        "1",
                        "2"});
#line 89
 testRunner.And("Ships in folowing grid points", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "value"});
            table6.AddRow(new string[] {
                        "A1"});
            table6.AddRow(new string[] {
                        "A1"});
            table6.AddRow(new string[] {
                        "A2"});
#line 93
 testRunner.And("I type grid coordinates", ((string)(null)), table6, "And ");
#line 98
 testRunner.When("Game play starts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 99
 testRunner.Then("Game displayed shot twice warning 1 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Shooting at invalid coordinates")]
        public virtual void ShootingAtInvalidCoordinates()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Shooting at invalid coordinates", null, ((string[])(null)));
#line 102
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 103
 testRunner.Given("New Battleships game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "line",
                        "column"});
            table7.AddRow(new string[] {
                        "1",
                        "1"});
            table7.AddRow(new string[] {
                        "1",
                        "2"});
#line 104
 testRunner.And("Ships in folowing grid points", ((string)(null)), table7, "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "value"});
            table8.AddRow(new string[] {
                        "A11"});
            table8.AddRow(new string[] {
                        "K1"});
            table8.AddRow(new string[] {
                        "K11"});
            table8.AddRow(new string[] {
                        "A1"});
            table8.AddRow(new string[] {
                        "A2"});
#line 108
 testRunner.And("I type grid coordinates", ((string)(null)), table8, "And ");
#line 115
 testRunner.When("Game play starts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 116
 testRunner.Then("Game displayed invalid input warning 3 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Checking if game is unfinised")]
        [NUnit.Framework.TestCaseAttribute("Hit", null)]
        [NUnit.Framework.TestCaseAttribute("Miss", null)]
        [NUnit.Framework.TestCaseAttribute("Empty", null)]
        public virtual void CheckingIfGameIsUnfinised(string unfinishedCellState, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Checking if game is unfinised", null, exampleTags);
#line 119
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 120
 testRunner.Given("New Battleships game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 121
 testRunner.And(string.Format("\'{0}\' in 1, 1", unfinishedCellState), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 122
 testRunner.Then("Game is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Checking if game is finised")]
        [NUnit.Framework.TestCaseAttribute("Ship", null)]
        public virtual void CheckingIfGameIsFinised(string finishedCellState, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Checking if game is finised", null, exampleTags);
#line 131
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 132
 testRunner.Given("New Battleships game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 133
 testRunner.And(string.Format("\'{0}\' in 1, 1", finishedCellState), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 134
 testRunner.Then("Game is not finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
